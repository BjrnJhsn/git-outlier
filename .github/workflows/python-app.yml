# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install project
      run: poetry install --no-interaction
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 git_outlier/ test/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. Use Black's line length (88 chars)
        poetry run flake8 git_outlier/ test/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    - name: Run unit tests with coverage
      run: |
        poetry run pytest test/test_outlier.py test/test_date_parameters.py test/test_error_handling.py test/test_output_functions.py test/test_main_integration.py test/test_plot_generation.py --cov=git_outlier --cov-report=xml -v
    - name: Run git integration tests
      run: |
        poetry run pytest test/test_git_integration.py -v
    - name: Run lizard integration tests
      run: |
        poetry run pytest test/test_lizard_integration.py -v
    - name: Check formatting with black
      run: |
        # stop the build if the black formatter wants to change a file
        poetry run black . --check
    - name: Type check with mypy
      run: |
        # run type checking on the main module
        poetry run mypy git_outlier/git_outlier.py --ignore-missing-imports
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        files: ./coverage.xml # optional
        flags: unittests # optional
        name: codecov-umbrella # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)
